grammar labeledExpr;


prog: stat+ ;


stat: expr NEWLINE # printExpr
| ID '=' expr NEWLINE # assign
| NEWLINE # blank
;


expr
: expr op=('*'|'/') expr # MulDiv
| expr op=('+'|'-') expr # AddSub
| expr op='^' expr # Pow
| '-' expr # UnaryMinus
| atom # AtomExpr
;


atom
: primary ('!')* # FactorialChain
;


primary
: NUMBER # Number
| ID '(' exprList? ')' # FunctionCall
| ID # Variable
| '(' expr ')' # Parens
;


exprList: expr (',' expr)* ;


NEWLINE: [\r\n]+ ;
NUMBER: [0-9]+ ('.' [0-9]+)? ;
ID: [a-zA-Z_][a-zA-Z_0-9]* ;
WS: [ \t]+ -> skip ;


// Operators like '!' are matched literally in grammar rules (no token needed).
